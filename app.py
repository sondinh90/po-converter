import streamlit as st
import pandas as pd
import pdfplumber
import re
import os
import io # D√πng ƒë·ªÉ x·ª≠ l√Ω file trong b·ªô nh·ªõ

# --- H√ÄM B√ìC T√ÅCH CHO 4PS (DUY NH·∫§T) ---
def parse_4ps_po(full_text, page):
    """
    H√†m n√†y ƒë∆∞·ª£c vi·∫øt RI√äNG ƒë·ªÉ b√≥c t√°ch PO c·ªßa 4PS (c·∫£ 2 lo·∫°i).
    """
    st.write("  > Nh·∫≠n di·ªán: M·∫´u PO c·ªßa 4PS. ƒêang x·ª≠ l√Ω...")
    items_list = []

    order_num_match = re.search(r"Order Number\s*:\s*(\d+)", full_text)
    delivery_date_match = re.search(r"Request Del\. Time\s*:\s*(\d{2}/\d{2}/\d{4})", full_text)
    buyer_name_match = re.search(r"Buyer Name\s*:\s*([^\n]+)", full_text)
    
    order_number = order_num_match.group(1).strip() if order_num_match else None
    delivery_date = delivery_date_match.group(1).strip() if delivery_date_match else None
    buyer_name = buyer_name_match.group(1).strip() if buyer_name_match else None

    tables = page.extract_tables({"vertical_strategy": "lines", "horizontal_strategy": "lines"})
    if not tables:
        tables = page.extract_tables() 
    
    if not tables:
        st.warning(f"  [L·ªñI] Kh√¥ng t√¨m th·∫•y b·∫£ng trong file 4PS.")
        return []
        
    item_table = tables[-1] 
    
    for row in item_table[1:]:
        if row and row[1] and row[1].strip() != "" and "Total" not in row:
            # Chu·∫©n h√≥a s·ªë (4PS: 180,000.00 -> 180000.00)
            quantity_str = row[4].replace(',', '') if row[4] else '0'
            price_str = row[5].replace(',', '') if row[5] else '0'

            standard_item = {
                "Order_Number": order_number,    
                "Buyer_Name": buyer_name,      
                "Delivery_Date": delivery_date,
                "Item_Code": row[1],
                "Item_Name": row[2].replace('\n', ' '),
                "Quantity": quantity_str,
                "Price": price_str
            }
            items_list.append(standard_item)
            
    return items_list

# --- H√ÄM T·∫†O EXCEL (Gi·ªØ nguy√™n) ---
def create_hybrid_excel(standard_df, unrecognized_files_list):
    """
    T·∫°o file Excel trong b·ªô nh·ªõ:
    - Sheet 1: D·ªØ li·ªáu ƒë√£ chu·∫©n h√≥a (standard_df)
    - C√°c sheet kh√°c: D·ªØ li·ªáu th√¥ t·ª´ c√°c file kh√¥ng nh·∫≠n di·ªán (unrecognized_files_list)
    """
    output = io.BytesIO()
    with pd.ExcelWriter(output, engine='openpyxl') as writer:
        
        # --- VI·∫æT SHEET 1: D·ªÆ LI·ªÜU ƒê√É CHU·∫®N H√ìA (4PS) ---
        if not standard_df.empty:
            standard_df.to_excel(writer, sheet_name="TongHop_4PS", index=False)
        else:
            # T·∫°o sheet r·ªóng n·∫øu kh√¥ng c√≥ d·ªØ li·ªáu 4PS
            pd.DataFrame(["Kh√¥ng c√≥ d·ªØ li·ªáu PO 4PS n√†o ƒë∆∞·ª£c t√¨m th·∫•y."]).to_excel(writer, sheet_name="TongHop_4PS", index=False, header=False)
        
        # --- VI·∫æT C√ÅC SHEET TH√î (RAW DUMP) ---
        if unrecognized_files_list:
            st.write("--- ƒêang x·ª≠ l√Ω c√°c file PDF kh√°c ---")
            for uploaded_file in unrecognized_files_list:
                
                # T·∫°o t√™n sheet an to√†n (lo·∫°i b·ªè k√Ω t·ª± ƒë·∫∑c bi·ªát, gi·ªõi h·∫°n 30 k√Ω t·ª±)
                safe_sheet_name = re.sub(r'[\\/*?:"<>|\[\]\s]', '_', uploaded_file.name.split('.')[0])
                safe_sheet_name = safe_sheet_name[:30]
                
                try:
                    with pdfplumber.open(uploaded_file) as pdf:
                        all_rows_for_sheet = []
                        max_cols = 0
                        
                        # L·∫∑p qua t·ª´ng trang trong PDF
                        for page in pdf.pages:
                            # D√πng chi·∫øn l∆∞·ª£c "text" ƒë·ªÉ c·ªë g·∫Øng ƒë·ªçc c√°c b·∫£ng kh√¥ng c√≥ ƒë∆∞·ªùng k·∫ª
                            tables = page.extract_tables({"vertical_strategy": "text", "horizontal_strategy": "text"})
                            if not tables:
                                tables = page.extract_tables() # Th·ª≠ c·∫£ c√°ch m·∫∑c ƒë·ªãnh

                            if tables:
                                for table in tables:
                                    all_rows_for_sheet.extend(table) # Th√™m d·ªØ li·ªáu b·∫£ng
                                    # T√¨m s·ªë c·ªôt t·ªëi ƒëa ƒë·ªÉ ƒë·ªám
                                    if table: # ƒê·∫£m b·∫£o b·∫£ng kh√¥ng r·ªóng
                                        max_cols = max(max_cols, max(len(r) for r in table if r))
                            
                            if max_cols > 0:
                                all_rows_for_sheet.append([None] * max_cols) # Th√™m 1 d√≤ng tr·ªëng
                    
                    if all_rows_for_sheet:
                        df_raw = pd.DataFrame(all_rows_for_sheet)
                        df_raw.to_excel(writer, sheet_name=safe_sheet_name, index=False, header=False)
                        st.write(f"  > ƒê√£ dump file '{uploaded_file.name}' sang sheet '{safe_sheet_name}'")
                    else:
                        pd.DataFrame([f"Kh√¥ng t√¨m th·∫•y b·∫£ng n√†o trong file {uploaded_file.name}"]).to_excel(writer, sheet_name=safe_sheet_name, index=False, header=False)

                except Exception as e:
                    st.error(f"L·ªói khi dump file {uploaded_file.name}: {e}")
                    # Ghi l·ªói v√†o sheet
                    pd.DataFrame([f"L·ªói khi x·ª≠ l√Ω file: {e}"]).to_excel(writer, sheet_name=safe_sheet_name, index=False, header=False)

    return output.getvalue()

# --- GIAO DI·ªÜN WEB STREAMLIT (ƒê√£ c·∫≠p nh·∫≠t ti√™u ƒë·ªÅ) ---
st.set_page_config(page_title="C√¥ng c·ª• t·ªïng h·ª£p PO", layout="wide")
st.title("üöÄ C√¥ng c·ª• tr√≠ch xu·∫•t d·ªØ li·ªáu PO sang Excel")
st.write("T·∫£i l√™n c√°c file PDF c·ªßa 4PS v√† c√°c file PDF kh√°c.")
st.write("C√°c file 4PS s·∫Ω ƒë∆∞·ª£c g·ªôp v√†o sheet 'TongHop_4PS'. C√°c file PDF kh√°c s·∫Ω ƒë∆∞·ª£c tr√≠ch xu·∫•t b·∫£ng th√¥ v√†o c√°c sheet ri√™ng.")

# 1. Khu v·ª±c t·∫£i file
uploaded_files = st.file_uploader(
    "K√©o v√† th·∫£ file PDF c·ªßa b·∫°n v√†o ƒë√¢y:",
    type="pdf",
    accept_multiple_files=True
)

if uploaded_files:
    st.success(f"ƒê√£ nh·∫≠n {len(uploaded_files)} file. Nh·∫•n 'X·ª≠ l√Ω' ƒë·ªÉ b·∫Øt ƒë·∫ßu.")
    
    # 2. N√∫t b·∫•m x·ª≠ l√Ω
    if st.button("X·ª≠ l√Ω t·∫•t c·∫£ file"):
        all_standardized_data = []
        unrecognized_files = [] # <-- DANH S√ÅCH FILE S·∫º B·ªä DUMP
        
        progress_bar = st.progress(0)
        
        with st.expander("Xem chi ti·∫øt qu√° tr√¨nh x·ª≠ l√Ω:"):
            for i, uploaded_file in enumerate(uploaded_files):
                file_name = uploaded_file.name
                st.write(f"--- ƒêang m·ªü file: {file_name} ---")
                
                try:
                    with pdfplumber.open(uploaded_file) as pdf:
                        if not pdf.pages:
                            st.error(f"File {file_name} b·ªã l·ªói ho·∫∑c kh√¥ng c√≥ trang n√†o.")
                            continue
                        
                        page = pdf.pages[0]
                        full_text = page.extract_text()
                        
                        items = []
                        is_recognized = False
                        
                        # --- LOGIC NH·∫¨N DI·ªÜN T·ª∞ ƒê·ªòNG (ƒê√£ r√∫t g·ªçn) ---
                        if "4PS CORPORATION" in full_text or "C√îNG TY TNHH MTV KITCHEN 4PS" in full_text: 
                            customer_name = "4PS"
                            items = parse_4ps_po(full_text, page)
                            is_recognized = True
                        
                        # --- X·ª¨ L√ù K·∫æT QU·∫¢ ---
                        if is_recognized:
                            for item in items:
                                item['Customer'] = customer_name 
                                item['File_Name'] = file_name 
                                all_standardized_data.append(item)
                            st.write(f"  > Ho√†n t·∫•t file 4PS. Tr√≠ch xu·∫•t ƒë∆∞·ª£c {len(items)} d√≤ng s·∫£n ph·∫©m.")
                        else:
                            # --- N·∫æU KH√îNG NH·∫¨N DI·ªÜN, TH√äM V√ÄO DANH S√ÅCH CH·ªú DUMP ---
                            st.info(f"  > Kh√¥ng ph·∫£i file 4PS. S·∫Ω dump file n√†y sang sheet ri√™ng.")
                            unrecognized_files.append(uploaded_file)
                
                except Exception as e:
                    st.error(f"!!! L·ªñI NGHI√äM TR·ªåNG khi x·ª≠ l√Ω file {file_name}: {e}")
                
                progress_bar.progress((i + 1) / len(uploaded_files))

        # 3. X·ª≠ l√Ω d·ªØ li·ªáu sau khi l·∫∑p
        if not all_standardized_data and not unrecognized_files:
            st.error("Ho√†n t·∫•t, nh∆∞ng kh√¥ng c√≥ d·ªØ li·ªáu n√†o ƒë∆∞·ª£c tr√≠ch xu·∫•t.")
        else:
            df_standard = pd.DataFrame(all_standardized_data)
            
            # Ch·ªâ x·ª≠ l√Ω/hi·ªÉn th·ªã b·∫£ng chu·∫©n h√≥a n·∫øu c√≥
            if not df_standard.empty:
                try:
                    df_standard['Quantity'] = pd.to_numeric(df_standard['Quantity'], errors='coerce').fillna(0)
                    df_standard['Price'] = pd.to_numeric(df_standard['Price'], errors='coerce').fillna(0)
                except Exception as e:
                    st.warning(f"[C·∫¢NH B√ÅO] Kh√¥ng th·ªÉ d·ªçn d·∫πp d·ªØ li·ªáu s·ªë: {e}")

                columns_order = [
                    'Customer', 'Order_Number', 'Buyer_Name', 'Delivery_Date', 
                    'Item_Code', 'Item_Name', 'Quantity', 'Price', 
                    'File_Name'
                ]
                final_columns = [col for col in columns_order if col in df_standard.columns]
                df_standard = df_standard[final_columns]
                
                st.success(f"üéâ X·ª¨ L√ù D·ªÆ LI·ªÜU 4PS HO√ÄN T·∫§T! üéâ")
                st.write(f"ƒê√£ g·ªôp t·ªïng c·ªông {len(df_standard)} d√≤ng d·ªØ li·ªáu t·ª´ {df_standard['File_Name'].nunique()} file 4PS.")
                st.dataframe(df_standard) # Hi·ªÉn th·ªã b·∫£ng k·∫øt qu·∫£ chu·∫©n h√≥a
            else:
                st.info("Kh√¥ng t√¨m th·∫•y PO 4PS n√†o ƒë·ªÉ g·ªôp.")

            if unrecognized_files:
                st.info(f"S·∫µn s√†ng dump {len(unrecognized_files)} file PDF kh√°c sang c√°c sheet ri√™ng.")
            
            # 4. N√∫t t·∫£i file
            # G·ªçi h√†m t·∫°o excel "hybrid" m·ªõi
            excel_data = create_hybrid_excel(df_standard, unrecognized_files)
            
            st.download_button(
                label="üì• T·∫£i file Excel t·ªïng h·ª£p (G·ªôp 4PS + File th√¥)",
                data=excel_data,
                file_name="TongHop_PO_va_FileTho.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            )
