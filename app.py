import streamlit as st
import pandas as pd
import pdfplumber
import re
import os
import io # D√πng ƒë·ªÉ x·ª≠ l√Ω file trong b·ªô nh·ªõ

# --- H√ÄM B√ìC T√ÅCH CHO MEGA ---
def parse_mega_po(full_text, page):
    """
    H√†m n√†y ƒë∆∞·ª£c vi·∫øt RI√äNG ƒë·ªÉ b√≥c t√°ch PO c·ªßa Mega.
    """
    st.write("  > Nh·∫≠n di·ªán: M·∫´u PO c·ªßa Mega Market. ƒêang x·ª≠ l√Ω...")
    items_list = []
    
    order_num_match = re.search(r"OUR ORDER NUMBER\s*:\s*([\d/.]+)", full_text)
    delivery_date_match = re.search(r"PLANNED DELIVERY DATE\s*:\s*([\d-]+)", full_text)
    buyer_name_match = re.search(r"BUYER\s*:\s*([^\n]+)", full_text) 
    
    order_number = order_num_match.group(1).strip() if order_num_match else None
    delivery_date = delivery_date_match.group(1).strip() if delivery_date_match else None
    buyer_name = buyer_name_match.group(1).strip() if buyer_name_match else None 

    tables = page.extract_tables({"vertical_strategy": "text", "horizontal_strategy": "text"})
    if not tables:
        st.warning(f"  [L·ªñI] Kh√¥ng t√¨m th·∫•y b·∫£ng trong file Mega.")
        return []

    item_table = tables[0]
    
    for row in item_table[1:]:
        if row and row[0] and row[0].strip() != "":
            # Chu·∫©n h√≥a s·ªë (Mega: 68,000.000 -> 68000.000)
            quantity_str = row[4].replace(',', '') if row[4] else '0'
            price_str = row[5].replace(',', '') if row[5] else '0'

            standard_item = {
                "Order_Number": order_number,    
                "Buyer_Name": buyer_name,      
                "Delivery_Date": delivery_date,
                "Item_Code": row[1],
                "Item_Name": row[0].replace('\n', ' '),
                "Quantity": quantity_str, # S·∫Ω ƒë∆∞·ª£c convert ·ªü h√†m main
                "Price": price_str       # S·∫Ω ƒë∆∞·ª£c convert ·ªü h√†m main
            }
            items_list.append(standard_item)
    
    return items_list

# --- H√ÄM B√ìC T√ÅCH CHO 4PS ---
def parse_4ps_po(full_text, page):
    """
    H√†m n√†y ƒë∆∞·ª£c vi·∫øt RI√äNG ƒë·ªÉ b√≥c t√°ch PO c·ªßa 4PS (c·∫£ 2 lo·∫°i).
    """
    st.write("  > Nh·∫≠n di·ªán: M·∫´u PO c·ªßa 4PS. ƒêang x·ª≠ l√Ω...")
    items_list = []

    order_num_match = re.search(r"Order Number\s*:\s*(\d+)", full_text)
    delivery_date_match = re.search(r"Request Del\. Time\s*:\s*(\d{2}/\d{2}/\d{4})", full_text)
    buyer_name_match = re.search(r"Buyer Name\s*:\s*([^\n]+)", full_text)
    
    order_number = order_num_match.group(1).strip() if order_num_match else None
    delivery_date = delivery_date_match.group(1).strip() if delivery_date_match else None
    buyer_name = buyer_name_match.group(1).strip() if buyer_name_match else None

    tables = page.extract_tables({"vertical_strategy": "lines", "horizontal_strategy": "lines"})
    if not tables:
        tables = page.extract_tables() 
    
    if not tables:
        st.warning(f"  [L·ªñI] Kh√¥ng t√¨m th·∫•y b·∫£ng trong file 4PS.")
        return []
        
    item_table = tables[-1] 
    
    for row in item_table[1:]:
        if row and row[1] and row[1].strip() != "" and "Total" not in row:
            # Chu·∫©n h√≥a s·ªë (4PS: 180,000.00 -> 180000.00)
            quantity_str = row[4].replace(',', '') if row[4] else '0'
            price_str = row[5].replace(',', '') if row[5] else '0'

            standard_item = {
                "Order_Number": order_number,    
                "Buyer_Name": buyer_name,      
                "Delivery_Date": delivery_date,
                "Item_Code": row[1],
                "Item_Name": row[2].replace('\n', ' '),
                "Quantity": quantity_str,
                "Price": price_str
            }
            items_list.append(standard_item)
            
    return items_list

# --- H√ÄM B√ìC T√ÅCH M·ªöI CHO AVOLTA ---
def parse_avolta_po(full_text, page):
    """
    H√†m n√†y ƒë∆∞·ª£c vi·∫øt RI√äNG ƒë·ªÉ b√≥c t√°ch PO c·ªßa Avolta.
    """
    st.write("  > Nh·∫≠n di·ªán: M·∫´u PO c·ªßa Avolta. ƒêang x·ª≠ l√Ω...")
    items_list = []

    # 1. Tr√≠ch xu·∫•t th√¥ng tin chung
    # PO No.
    order_num_match = re.search(r"PO No\.\s*([\w-]+)", full_text)
    # Delivery Date
    delivery_date_match = re.search(r"Delivery Date\s*(\d{2}/\d{2}/\d{4})", full_text)
    # Delivery Address -> L·∫•y d√≤ng ƒë·∫ßu ti√™n
    buyer_name_match = re.search(r"Delivery Address\s*([^\n]+)", full_text)
    
    order_number = order_num_match.group(1).strip() if order_num_match else None
    delivery_date = delivery_date_match.group(1).strip() if delivery_date_match else None
    buyer_name = buyer_name_match.group(1).strip() if buyer_name_match else None

    # 2. Tr√≠ch xu·∫•t b·∫£ng
    tables = page.extract_tables() # Avolta d√πng layout ƒë∆°n gi·∫£n
    
    if not tables or len(tables) < 3:
        st.warning(f"  [L·ªñI] Kh√¥ng t√¨m th·∫•y b·∫£ng s·∫£n ph·∫©m trong file Avolta.")
        return []
        
    item_table = tables[-1] # B·∫£ng s·∫£n ph·∫©m l√† b·∫£ng cu·ªëi c√πng
    
    # 3. ƒê·ªçc d·ªØ li·ªáu b·∫£ng
    for row in item_table[1:]: # B·ªè qua d√≤ng ti√™u ƒë·ªÅ
        # Ki·ªÉm tra c·ªôt Item No. (row[0]) c√≥ d·ªØ li·ªáu kh√¥ng
        if row and row[0] and row[0].strip() != "" and "Total" not in row[0]:
            
            # QUAN TR·ªåNG: Chu·∫©n h√≥a s·ªë (Avolta: 47.259,00 -> 47259.00)
            # Quantity
            quantity_str = row[2].replace('.', '').replace(',', '.') if row[2] else '0'
            # Price
            price_str = row[4].replace('.', '').replace(',', '.') if row[4] else '0'

            standard_item = {
                "Order_Number": order_number,    
                "Buyer_Name": buyer_name,      
                "Delivery_Date": delivery_date,
                "Item_Code": row[0], # Item No.
                "Item_Name": row[1].replace('\n', ' '), # Item
                "Quantity": quantity_str,
                "Price": price_str
            }
            items_list.append(standard_item)
            
    return items_list

# --- H√ÄM HELPER ƒê·ªÇ CHUY·ªÇN DF SANG EXCEL TRONG B·ªò NH·ªö ---
def to_excel(df):
    output = io.BytesIO()
    with pd.ExcelWriter(output, engine='openpyxl') as writer:
        df.to_excel(writer, index=False, sheet_name='TongHopPO')
    processed_data = output.getvalue()
    return processed_data

# --- GIAO DI·ªÜN WEB STREAMLIT ---
st.set_page_config(page_title="C√¥ng c·ª• t·ªïng h·ª£p PO", layout="wide")
st.title("üöÄ C√¥ng c·ª• tr√≠ch xu·∫•t d·ªØ li·ªáu PO sang Excel")
st.write("T·∫£i l√™n c√°c file PDF c·ªßa Mega, 4PS, v√† Avolta ƒë·ªÉ t·ªïng h·ª£p t·ª± ƒë·ªông.")

# 1. Khu v·ª±c t·∫£i file
uploaded_files = st.file_uploader(
    "K√©o v√† th·∫£ file PDF c·ªßa b·∫°n v√†o ƒë√¢y:",
    type="pdf",
    accept_multiple_files=True
)

if uploaded_files:
    st.success(f"ƒê√£ nh·∫≠n {len(uploaded_files)} file. Nh·∫•n 'X·ª≠ l√Ω' ƒë·ªÉ b·∫Øt ƒë·∫ßu.")
    
    # 2. N√∫t b·∫•m x·ª≠ l√Ω
    if st.button("X·ª≠ l√Ω t·∫•t c·∫£ file"):
        all_standardized_data = []
        progress_bar = st.progress(0)
        
        with st.expander("Xem chi ti·∫øt qu√° tr√¨nh x·ª≠ l√Ω:"):
            for i, uploaded_file in enumerate(uploaded_files):
                file_name = uploaded_file.name
                st.write(f"--- ƒêang m·ªü file: {file_name} ---")
                
                try:
                    with pdfplumber.open(uploaded_file) as pdf:
                        page = pdf.pages[0]
                        full_text = page.extract_text()
                        
                        customer_name = "Unknown"
                        items = []
                        
                        # --- LOGIC NH·∫¨N DI·ªÜN T·ª∞ ƒê·ªòNG (ƒê√É C·∫¨P NH·∫¨T) ---
                        if "WH 79-DALAT BBXD PLATFORM" in full_text:
                            customer_name = "Mega Market"
                            items = parse_mega_po(full_text, page)
                        elif "4PS CORPORATION" in full_text or "C√îNG TY TNHH MTV KITCHEN 4PS" in full_text: 
                            customer_name = "4PS"
                            items = parse_4ps_po(full_text, page)
                        elif "Avolta" in full_text: 
                            customer_name = "Avolta"
                            items = parse_avolta_po(full_text, page)
                        else:
                            st.error(f"  [L·ªñI] Kh√¥ng nh·∫≠n di·ªán ƒë∆∞·ª£c m·∫´u PO cho file: {file_name}.")
                            continue
                        
                        for item in items:
                            item['Customer'] = customer_name 
                            item['File_Name'] = file_name 
                            all_standardized_data.append(item)
                        
                        st.write(f"  > Ho√†n t·∫•t file. Tr√≠ch xu·∫•t ƒë∆∞·ª£c {len(items)} d√≤ng s·∫£n ph·∫©m.")
                
                except Exception as e:
                    st.error(f"!!! L·ªñI NGHI√äM TR·ªåNG khi x·ª≠ l√Ω file {file_name}: {e}")
                
                progress_bar.progress((i + 1) / len(uploaded_files))

        # 3. X·ª≠ l√Ω d·ªØ li·ªáu sau khi l·∫∑p
        if not all_standardized_data:
            st.error("Ho√†n t·∫•t, nh∆∞ng kh√¥ng c√≥ d·ªØ li·ªáu n√†o ƒë∆∞·ª£c tr√≠ch xu·∫•t.")
        else:
            df = pd.DataFrame(all_standardized_data)
            
            # Chuy·ªÉn ƒë·ªïi t·∫•t c·∫£ c√°c s·ªë ƒë√£ ƒë∆∞·ª£c chu·∫©n h√≥a sang d·∫°ng s·ªë
            try:
                df['Quantity'] = pd.to_numeric(df['Quantity'], errors='coerce').fillna(0)
                df['Price'] = pd.to_numeric(df['Price'], errors='coerce').fillna(0)
            except Exception as e:
                st.warning(f"[C·∫¢NH B√ÅO] Kh√¥ng th·ªÉ d·ªçn d·∫πp d·ªØ li·ªáu s·ªë: {e}")

            columns_order = [
                'Customer', 'Order_Number', 'Buyer_Name', 'Delivery_Date', 
                'Item_Code', 'Item_Name', 'Quantity', 'Price', 
                'File_Name'
            ]
            final_columns = [col for col in columns_order if col in df.columns]
            df = df[final_columns]
            
            st.success(f"üéâ X·ª¨ L√ù HO√ÄN T·∫§T! üéâ")
            st.write(f"ƒê√£ l∆∞u t·ªïng c·ªông {len(df)} d√≤ng d·ªØ li·ªáu t·ª´ {df['File_Name'].nunique()} file.")
            
            # 4. N√∫t t·∫£i file
            excel_data = to_excel(df)
            st.download_button(
                label="üì• T·∫£i file Excel t·ªïng h·ª£p",
                data=excel_data,
                file_name="TongHop_TAT_CA_DonHang.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            )
            
            st.dataframe(df) # Hi·ªÉn th·ªã b·∫£ng k·∫øt qu·∫£
